-- credit
-- main sparks distribution logic from https://github.com/thyeem/longshot
--code in 2020.10.11 @ hongkong
-- by leejw51@gmail.com

module Main  where
import Control.Monad ( guard, replicateM )
import           Control.DeepSeq
import           Control.Parallel
import           Control.Applicative
import           Data.Foldable
import qualified Data.ByteString.Char8         as C
import qualified Data.ByteString.Base16        as H
import qualified Data.ByteString as B
import qualified Crypto.Hash.SHA256            as S
import Numeric (showHex)
import qualified Data.Time.Clock as Clock
import Data.List.Split


prettyPrint = concat . map (flip showHex "") . B.unpack

hacking :: [[Char]] -> C.ByteString ->Maybe  [C.ByteString]
hacking  [] _  =  Nothing
hacking (x:xs) target= do
  let src = C.pack x
  let hash = S.hash src
  if target==hash then (Just [src]) else hacking xs target

runsparks _  []    _   = []
runsparks f  (x : xs) target = par y (pseq ys  (y : ys)) where
  y  = force $ f x target
  ys = runsparks f  xs target

-------------------------------------------------------------------------------
main= do
  putStrLn "enter string(only digits up to 8)="
  target_user <- getLine
  let target= S.hash $ C.pack target_user

  let mylength = length target_user
  putStrLn $ "length= " ++ (show mylength)
  putStrLn $ "hash=" ++  prettyPrint target
  oldtime <-  Clock.getCurrentTime
  let unit= 30
  let chunks= chunksOf unit $ replicateM mylength ['0'..'9']
  let found = asum  $  runsparks  hacking chunks target
  print found
  newtime <- Clock.getCurrentTime
  let t3=  Clock.diffUTCTime  newtime oldtime
  print "elased time" >> print t3